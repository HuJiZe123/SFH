@model SFH.Models.tbl_Movement

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>tbl_Movement</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control mw-100" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="form-group mb-2">
                    @Html.DropDownList("Currency", null, htmlAttributes: new { @class = "form-control btn btn-primary mw-100" })
                    @Html.TextBox("txtBoxValueCurrency", (string)@ViewBag.txtBoxValueCurrency, htmlAttributes: new { @class = "form-control mw-100", @disabled = "disabled" })
                </div>
                <script src="~/Scripts/jquery-3.4.1.min.js"></script>
                <script>

                    function GetCurrencyValues(callback) {
                        $.ajax({
                            type: "POST",
                            url: '/tbl_Movement/GetValuesFromCurrency',
                            data: '{nameCurrency: "' + $("#Currency").val() + '"}',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (r) {
                                $("#txtBoxValueCurrency").val(r);
                                CalculateTotal.call(CalculateTotal);
                            }
                        });
                    };

                    function CalculateTotal() {
                        if ($("#txtBoxAmount").val() == "") $("#txtBoxAmount").val("0");
                        $.ajax({
                            type: "POST",
                            url: '/tbl_Movement/CalculateTotal',
                            data: '{currencyValue   : "' + $("#txtBoxValueCurrency").val() + '", amount : "' + $("#txtBoxAmount").val() + '"}',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (r) {
                                $("#Cost").val(r);
                                CalculateTotal2.call(CalculateTotal2);
                            }
                        })
                    };

                    function CalculateTotal2() {
                        if ($("#quantity").val() == "") $("#quantity").val("0");
                        if ($("#Cost").val() == "") $("#Cost").val("0");
                        $.ajax({
                            type: "POST",
                            url: '/tbl_Movement/CalculateTotal2',
                            data: '{quantity   : "' + $("#quantity").val() + '", amount : "' + $("#Cost").val() + '"}',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (r) {
                                $("#Sutotal").val(r);
                            }
                        });
                    };

                    $(document).ready(function () {
                        $("#Currency").change(GetCurrencyValues);
                        $("#txtBoxValueCurrency").click(CalculateTotal);
                        $("#txtBoxAmount").on('input propertychange paste', CalculateTotal);
                        $("#Cost").click(CalculateTotal2);
                        $("#quantity").on('input propertychange paste', CalculateTotal2);
                    });
                </script>
                @Html.TextBox("txtBoxAmount", null, htmlAttributes: new { @class = "form-control mb-2 mw-100" })
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control mb-2 mw-100", @disabled = "disabled" } })
            </div>
            @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control mw-100" } })
                @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sutotal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Sutotal, new { htmlAttributes = new { @class = "form-control mw-100", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Sutotal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpectedDate, new { htmlAttributes = new { @class = "form-control mw-100" } })
                @Html.ValidationMessageFor(model => model.ExpectedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExecutedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExecutedDate, new { htmlAttributes = new { @class = "form-control mw-100" } })
                @Html.ValidationMessageFor(model => model.ExecutedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control mw-100" } })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.type, new { htmlAttributes = new { @class = "form-control mw-100" } })
                @Html.ValidationMessageFor(model => model.type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

    <div>
        @Html.ActionLink("Back to Index", "Index",
                   new {
                       year = ViewBag.YearInMonth,
                       month = ViewBag.ActualMonth,
                       type = ViewBag.ActualType,
                       amount = ViewBag.ActualAmount
                   },
                   htmlAttributes: new { @class = "btn btn-primary w-100 mt-3", @style = "background-color:#061F40; color:white;" })
    </div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
